<?php

//mac从零开始配置开发环境

//chrome浏览器
//command + 空格  呼出safari打开https://www.google.com/browser/desktop/index.html download 打开 拖拽 推出设备，打开chrome设为默认浏览器，登录google个人账号，同步插件。后续需要更好使用chrome的调试工具，安装插件，jsonFormatter  Momentum


//Alfred电脑工具管理
//Alfred工具的管理中可以使用，先command + 空格 搜索Chrome打开https://www.alfredapp.com官网,download就可以使用基本功能，设置commond + d 快捷键，设置主题风格便可以投入使用


//iterm2和zshell
//有terminal,但iterm2命令行也可以更好看，结合zshell使用。alfred搜chrome打开搜https：//www.iterm2.com 这里download打开拖拽，Alfred打开,iterm2就可以投入使用
//zshell结合iterm2使用。alfred打开Chrome，打开https://www.github.com/robbyrussell/oh-my-zsh 中用curl方式安装，提示不能安装命令就自动获取安装，输入密码便可以显示配置成功。注意~/.zshrc这个文件。vim 打开~/.zshrc配置插件和主题.vim ~/.zshrc  theme来改变主题，iterm2可以在左上角配置全屏快捷键command + enter 在appearance里设置,同时配置左上角单引号作为显示隐藏iterm2的快捷键这个在key里设置，还可以设置命令行字体大小以及行间距在profiles里进行设置大小15-18即可，字体pt-mono，行间距150就可以。command + q 强制退出，再次登录会显示上次登录时间，可以touch .hushlogin,建立一个隐藏文件，这样下次登录就不会再出现上次登录时间.


//sublim
//安装和美化sublim.经常用到sublim和vim,phpstorm。chrome打开https://www.sublimetext.com/3.拉一个项目进行配置。mac解压工具用Unarchiver，app store就有。tool里安装package control。快捷键command + shift + p来安装插件。command + p查找文件和类等。pci搜索安装package control,弹框里输入material找到material theme安装主题，安装 a file icon,点击install.


//phpstorm
//phpstorm配置,alfred搜索phpstorm eap，没有就跳转安装。view下的status bar可以关掉，navagation bar也可以关掉,command + ,可以打开配置跟sublim这点一样,搜browser，关掉浏览器显示，并apply.搜plugins安装一些插件，找brows reopens，点开安装.env file support,安装material theme UI
安装color ide,安装ideavim,设置页面editor,color scheme,general等便可以设置


//mysql
1045 error


//homebrew
//借助homebrew,https://brew.sh/这里可以点击下载，是一个软件的包管理，可以轻松安装东西，复制/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
到iterm2命令行里回车安装输入密码成功后，输入命令brew -h 可以看到已经起作用,brew命令的使用有例子
  brew search [TEXT|/REGEX/]
  brew (info|home|options) [FORMULA...]
  brew install FORMULA...
  brew update
  brew upgrade [FORMULA...]
  brew uninstall FORMULA...
  brew list [FORMULA...]


//php7和mysql
//输入brew search php71,然后用其中一个便可以，brew install homebrew/php/php71,就可以把php71安装好了，php -v 查看版本,接下来安装mysql，brew install mariadb 回车就可以装好,mysql开机启动brew services start mariadb
  
  
//安装node.js和npm
//官网nodejs.org/en/下载，安装，打开新的iterm2窗口，node -v,查看版本，可以看到已经安装完毕,npm -v 看到npm版本，进入桌面一个laravel项目，npm install回车，安装npm 的package包就可以，


//安装yarn
//还可以yarn来安装，官网yarnpkg.com/zh-Hans/,brew install yarn就可以安装yarn了，这里依赖node。输入yarn回车,可配置npm,运行npm run dev


//composer
//iterm2里直接composer是没作用的，来到官网getcomposer.org,   
download
复制
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"
到iterm2里，这样就安装好了，运行 php composer.phar,能看到composer的命令。命令简洁，只用composer就好，可以这样设置 mv composer.phar /usr/local/bin/composer 。然后直接运行composer就好了。
Packagist 镜像使用方法
方法一： 修改 composer 的全局配置文件（推荐方式）
打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：
composer config -g repo.packagist composer https://packagist.phpcomposer.com


//laravel
//打开官网packagist.org/,搜索laravel/installer,也可以laravel.com官网上，composer global require "laravel/installer"，把laravel下载下来，就可以使用laravel命令了，这样laravel就安装好了。但是安装到.composer目录里，不能直接用laravel命令，需要配置，vim ~/.zshrc 运行，第二行#去掉，加上一个环境～/.composer/vendor/bin:就可以保存退出，然后新输入laravel，看是否起作用。新开一个窗口,运行laravel就可以了。laravel new blog可 安装一个目录名是blog的laravel的项目


php artisan make:auth
php artisan make:migrations create_table_tablename --create=tablename
php artisan migrate
php artisan make:model Table
php artisan make:controller TableController
php artisan tinker
进入交互界面数据库填充60条数据：
namespace App;
factory(ModelName::class, 60)->create();
laravel 2002错误
https://stackoverflow.com/questions/20723803/pdoexception-sqlstatehy000-2002-no-such-file-or-directory



//laravel valet,配置dev访问
//安装https://laravel.com/docs/5.6/valet  ,根据文档进行安装。
//brew update
//确定php版本
//path环境变量
//运行composer global require laravel/valet就安装好了
//valet install运行安装其他，这个时候可以新开一个窗口来运行，这里可以看到nginx等都装好来，
//在家目录下创建一个sites目录，进入sites.测试valet,运行valet park，这个sites可以作为浏览器访问都根目录。运行命令laravel new task,浏览器里输入地址task.dev就可以访问这个laravel项目。valet domain .test 然后在浏览器里打开就可以了。打开sublim,打开task项目，编辑env,配置数据库。iterm2里运行 mysql -uroot -p,建数据库，create database task,exit,运行完之后，可以运行php artisan migrate,
valet it works 问题解决方法：
1/sudo apachectl stop
2/valet restart   ，这样就ok了 


//Suquel Pro 好的mysql管理工具
//mac 下的navicat premium   https://pan.baidu.com/s/1o7lxBOe   txcw,就可以用navicat了。到sequelpro.com官网,download,图形界面里，输入name为localhost,地址127.0.0.1，用户root，添加到favourite里，选择数据库就可以了。


//laravel生产环境 homestead
//官网https://laravel.com/docs/5.6/homestead   文档，依托虚拟机实现。开始：点击：Installation & Setup，下载 VirtualBox 5.2， Vagrant。这两个软件右键打开链接就可以。分别：https://www.virtualbox.org/wiki/Downloads    https://www.vagrantup.com/downloads.html  都选os。一路继续安装就可以。iterm里运行vagrant，然后添加virbox,运行vagrant box add laravel/homestead，看virtualbox是序号几就输入便可以,下载慢。下载好之后运行git clone https://github.com/laravel/homestead.git ~/Homestead，Mac os 自带有git,git --version可以查看版本，运行命令，cd ~/Homestead，运行git checkout v7.2.0，运行bash init.sh，配置Homestead.yaml，
确定ssh-key存在，运行：ssh-keygen -t rsa -C “##@##.com”
vim /etc/ssh/ssh_config
1
找到

#   IdentityFile ~/.ssh/identity
#   IdentityFile ~/.ssh/id_rsa
#   IdentityFile ~/.ssh/id_dsa
1
2
3
把前面#去掉，然后在 IdentityFile 后填写你用来执行ssh时所用的密钥
配置时家目录下面建立code文件夹，
authorize: ~/.ssh/id_rsa.pub

keys:
    - ~/.ssh/id_rsa

folders:
    - map: ~/code
      to: /home/vagrant/code

sites:
    - map: code.app
      to: /home/vagrant/code/codecasts/public
      
这里code下面有个codecasts,所以code目录下面建立codecasts项目，所以运行laravel new codecasts,来创建项目。
如果改了homestead.yaml 配置，重新加载nginx,需要运行vagrant reload --provision，
配置hosts文件，mac os里，vim编辑sudo vim /etc/hosts  添加192.168.10.10  code.app
运行vagrant up 成功


//homestead 工作流程
//文档https://laravel.com/docs/5.6/homestead#daily-usage
//sudo vim ~/.zshrc
//添加
function homestead()
    ( cd ~/Homestead && vagrant $* )
}
//开心iterm新窗口，可以直接使用homestead命令里
//运行homestead ssh,进入ubuntu系统
//多项目管理，yaml文件里配置api项目，hosts文件里添加，code文件夹下运行laravel new api，就可以添加项目
//重启homestead，  vagrant reload --provision  浏览器访问地址
//homestead 链接数据库，打开项目，配置env，数据库用户名密码不用更改，建立新的数据库连接，库名：homestead,用户：homestead,密码：secret，端口：33060，查看连接信息就可以看到是ubuntu类型服务器。建立api数据库，建表，需要mac里进入到homestead虚拟机里，进入项目，运行php artisan migrate，本地和虚拟机的项目要区分好，虚拟机，要进入虚拟机里操作数据库。


homestead中php环境没有redis扩展
使用vagrant命令的ssh选项连接到homestead
下载编译php7.2   redis 我下载到/usr/local/src下面：git clone https://github.com/phpredis/phpredis.git
进入到这个目录    cd phpredis 
执行            /usr/bin/phpize7.2
编译            ./configure --with-php-config=/usr/bin/php-config7.2
编译执行         make && make install
在phpredis目录下面，生成个./module/redis.so
查看php的extension_dir    php -i|grep extension_dir    
把redis.so移到扩展目录里    sudo cp ./module/redis.so /usr/lib/php/20170718
创建redis.ini配置文件      sudo touch /etc/php/7.2/fpm/conf.d/20-redis.ini
使用vi编辑器写入如下内容     extension=redis.so
重启查看phpinfo()是否有redis扩展

homestead中nginx配置
/etc/nginx/sites-enabled/think.test
参考https://laravel-china.org/index.php/topics/3030/homestead-configuration-nginx-and-other-issues?order_by=created_at&


homestead中php7.2安装grpc扩展
资源安装
1  git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc
2  可以 Build and install the gRPC C core library.
    $ cd grpc
    $ git submodule update --init
    $ make
    $ sudo make install
3 可以Compile the gRPC PHP extension
   $ cd grpc/src/php/ext/grpc
   $ /usr/bin/phpize7.2
   $ ./configure --with-php-config=/usr/bin/php-config7.2
   $ make
   $ sudo make install
4 添加extension=grpc.so 扩展跟redis类似
   sudo touch /etc/php/7.2/fpm/conf.d/20-grpc.ini
   extension=grpc.so


homestead中php7.2安装phalcon扩展
1   sudo git clone https://github.com/phalcon/cphalcon
2   cd cphalcon/build
3   sudo ./install --phpize /usr/bin/phpize7.2 --php-config /usr/bin/php-config7.2
4   添加extension=phalcon.so 扩展跟redis类似
    sudo touch /etc/php/7.2/fpm/conf.d/20-phalcon.ini
    extension=phalcon.so
    
  




//vim配置
//draculatheme.com
//编辑配置 家目录下面vimrc  添加syntax on,保存
//上面就可以识别文件高亮，运行vim ~/.zshrc,就可以看到高亮
//(1)vimrc的配置如下：
https://gist.coding.net/u/jellybool/
内容：
set nocompatible
syntax on
set t_CO=256
set linespace=16
set autowriteall
set tabstop=8
set expandtab
set softtabstop=4
set shiftwidth=4
set backspace=indent,eol,start
(2)上面官网，配置iterm, 进入桌面，运行git clone https://github.com/dracula/iterm.git  ，打开iterm配置 command + , ，在profile里，(1)color右下角，选import桌面上的那个东西，然后应用dracula，(2)general里配置previous use,


git简单命令配置
.zshrc 里添加 source ~/.alias
添加.alias文件，里面添加git配置信息如下：
alias gs="git status"
alias gc="git commit -m "
alias gaa="git add ."
alias gp="git push"
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gll="git log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'"
保存退出
进入git文件，运行source ~/.zshrc,然后就可以用git配置的命令了 gl等。


iterm2命令行自动提示
地址：github.com/zsh-users/zsh-autosuggestions
oh-my-zsh下载（1）运行命令：git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions
（2）.zshrc里添加plugins=(zsh-autosuggestions)  搜plugins 一个空格添加zsh-autosuggestions,保存退出，就可以使用了。

packages
composer require jpush/jpush 消息推送
composer require riverslei/xmpush
composer require lingxi/ali-opensearch-sdk 搜索

composer require nesbot/carbon 时间
composer require gregwar/captchaf  验证码
composer require bacon/bacon-qr-code  
composer require barryvdh/laravel-cors
composer require cartalyst/sentry
composer require defuse/php-encryption
composer require dusterio/lumen-passport
composer require firebase/php-jwt
composer require fzaninotto/faker
composer require guzzlehttp/guzzle
composer require guzzlehttp/psr7
composer require guzzlehttp/promises
composer require hamcrest/hamcrest-php
composer require intervention/image
composer require jaybizzle/crawler-detect
composer require jenssegers/agent
composer require jenssegers/mongodb
composer require jenssegers/mongodb-sentry
composer require lcobucci/jwt
composer require mnabialek/laravel-sql-logger
composer require mobiledetect/mobiledetectlib
composer require mongodb/mongodb
composer require mtdowling/cron-expression
composer require mustangostang/spyc
composer require mycontroller/ucclient
composer require phpseclib/phpseclib
composer require predis/predis
composer require qiniu/php-sdk
composer require simplesoftwareio/simple-qrcode
composer require soapbox/laravel-formatter
composer require zendframework/zend-diactoros







phpstorm界面简化
command + shift + A 配置下面内容
breadcrumbs 去掉文件路径
code folding  去掉折叠线，去掉outline
show method separators    背景色改掉namespace 和 class 分割线去掉，去掉show method separators
command + 1 开关sidebar
show right margin  去掉最右面的线



phpstorm快捷键自定义 
command + shift + A 打开keymap prefrence,起别名，配置方法都一样
快速打开项目中某个文件  command + p             add key shutcut  file
一个PHP文件里查看都有哪些方法  command + m   输入field找方法并定位    file structure
打开最近打开过的文件     command + e    输入过滤
跨文件定位某个类    command+L  



phpstorm psr自动加载
composer.json 里autoload里有
app是source目录，创建类时候自动命名空间是app，可以在directors目录里选中app，选source修改命名空间名字



PHPstorm 快速创建文件
不在sidebar里创建文件
command + 向上箭头   然后  command + n ,输入过滤进行创建


phpstorm 配置file template
文件创建作者名，创建时间等去掉
command+shift+A 搜 file template   php class 文件去掉第一行


git安装
git-scm.com
git config  
global : ~/.gitconfig
local  :.git/config
system :/etc/.gitconfig
git add src/*.js
git commit --amend
git log 用在after之后
git reset --hard hash 某个hash时间点的代码
git reset --sort hash 代码没有影响
git log 
git diff 文件
git checkout -- 文件
提交完后 git show hash 查看提交变化
git rm -r --cached 文件夹
.DS_Store 忽略调






Nginx、tomcat访问日志准实时分析统计--goaccess
获取线上用户访问日志分析统计结果
goaccess图文并茂，每秒8w访问日志分析统计
websorket10秒刷新
linux下安装goaccess
1、安装依赖
yum install ncurses-devel
wget http://geolite.maxmind.com/download/geoip/api/c/GeoIP.tar.gz
tar -zxvf GeoIP.tar.gz
cd GeoIP-1.4.8/
./configure
make && make install
2、安装goaccess
wget http://tar.goaccess.io/goaccess-1.1.1.tar.gz 
tar -xzvf goaccess-1.1.1.tar.gz 
cd goaccess-1.1.1/ 
./configure –enable-geoip –enable-utf8 
make 
make install
二、校对nginx的配置的日志格式（nginx.conf中log_format 使用以下自定义格式）
 log_format main '$remote_addr - $remote_user [$time_local] "$request" '

                    '$status $body_bytes_sent "$http_referer" '

                    '"$http_user_agent" "$http_x_forwarded_for" '

                    '$connection $upstream_addr '

                    '$upstream_response_time $request_time';               
三、修改后重启： 
nginx -s stop 
nginx
四、生成配置文件goaccess_log_conf_nginx.conf 
vi /opt/goaccess/goaccess_log_conf_nginx.conf
time-format %T
date-format %d/%b/%Y
log_format %h - %^ [%d:%t %^] "%r" %s %b "%R" "%u" "%^" %^ %^ %^ %T
五、生成统计页面
手工生成当日统计页面：
goaccess -f /opt/nginx/logs/access.log -p /opt/goaccess/goaccess_log_conf_nginx.conf -o /opt/www/day-report.html
生成实时统计页面
nohup goaccess -f /opt/nginx/logs/access.log -p /opt/goaccess/goaccess_log_conf_nginx.conf -o /opt/www/real-time-yong-report.html --real-time-html --ws-url=report.xxx.com &
检查是否存在进程：  ps -ef|grep goaccess
各种日志格式转换工具：https://github.com/stockrt/nginx2goaccess 


高并发系统限流：
缓存、降级、限流


laravel tinker 生成数据

1  php artisan tinker
注意有关联数据，先生成主表数据
factory(App\Models\User::class,2)->create()
factory(App\Models\UserAddress::class, 3)->create(['user_id' => 1])

2 
   orm中间表
   withPivot  中间表哪些属性可以访问
   pivot  访问中间表属性
   as   pivot属性重命名
   using   中间表模型调用   定义 中间表 模型时，我们要扩展 Pivot 类
   wherePivot  中间表信息过滤
   
3
   用属性访问获取对象模型
   用方法访问添加过滤条件

埋点技术

微信小程序开发
mp.weixin.qq.com
注册
开发者工具 mac
普通快速开发流程

微信公众号
overtrue / laravel
overtrue laravel-wechat
公众号配置

supervisor
下面问题解决方案
Exited too quickly (process log may have details)
把[program:XXX]中的名字换成一个跟启动命令不一样的另一个名字

sudo supervisorctl -c /usr/local/etc/supervisord.ini status
sudo supervisorctl -c /usr/local/etc/supervisord.ini reload
sudo supervisorctl -c /usr/local/etc/supervisord.ini start lllll

下面问题解决方案
http://localhost:9001 refused connection

[inet_http_server]         ; inet (TCP) server disabled by default

port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface

username=user              ; default is no username (open server)

password=123               ; default is no password (open server)

这几项的前面都把;移除

启动的时候使用-c 加载该配置文件

